generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  displayName   String?
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  servers                Server[]
  members                Member[]
  channels               Channel[]
  bans                   Ban[]
  conversationsInitiated Conversation[]  @relation("UserOne")
  conversationsReceived  Conversation[]  @relation("UserTwo")
  directMessages         DirectMessage[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique @db.Text

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]
  bans     Ban[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
  @@map("server")
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST

  @@map("member_role")
}

model Member {
  id       String     @id @default(uuid())
  role     MemberRole @default(GUEST)
  nickname String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
  @@map("member")
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO

  @@map("channel_type")
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
  @@map("channel")
}

model Ban {
  id     String  @id @default(uuid())
  reason String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
  @@map("ban")
}

model Message {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
  @@map("message")
}

model Conversation {
  id String @id @default(uuid())

  userOneId String
  userOne   User   @relation("UserOne", fields: [userOneId], references: [id], onDelete: Cascade)

  userTwoId String
  userTwo   User   @relation("UserTwo", fields: [userTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@unique([userOneId, userTwoId])
  @@index([userOneId])
  @@index([userTwoId])
  @@map("conversation")
}

model DirectMessage {
  id String @id @default(uuid())

  content String @db.Text

  fileUrl String? @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([conversationId])
  @@map("direct_message")
}
